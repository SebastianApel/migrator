#!/system/bin/sh
# Migrator
# A Backup Solution and ROM Migration Utility for Android
# Copyright 2018-2020, VR25 (patreon.com/vr25)
# License: GPLv3+


echo
set -u
umask 0077


ssaid=false
log=/dev/migrator.log
tmp=/dev/migrator.tmp
bkp_dir=/data/media/migrator/local
imports_dir=${bkp_dir%/*}/imported
ssaid_xml_tmp=/dev/.settings_ssaid.xml.tmp
ssaid_xml=/data/system/users/0/settings_ssaid.xml
ssaid_boot_script=${bkp_dir%/*}/enable-ssaid-apps.sh

sysdata="/data/system_?e/0/accounts_?e.db*
/data/system/sync/accounts.xml
/data/misc/adb/adb*_keys*
/data/misc/bluedroid/bt_config.*
/data/misc/wifi/WifiConfigStore.xml
/data/misc/wifi/softap.conf
/data/system/xlua/xlua.db*
/data/system/users/0/photo.png
/data/system/users/0/wallpaper*
/data/user*/0/com.android.*provider*/databases/*.db*
/data/system/deviceidle.xml"


parse_params() {
  compressor="lzop $1"
  dir=/sdcard/migrator
  regex=..
  shift
  while t -n "${1-}"; do
    case "$1" in
      -d|--dir)
        dir="$2"
        shift 2
      ;;
      -c|--compressor)
        compressor="$2"
        shift 2
      ;;
      -v)
        regex="$1 \"$2\""
        shift 2
      ;;
      *)
        regex="$1"
        shift
      ;;
    esac
  done
  extension=.tar.${compressor%% *}
}


# test
t() { test "$@"; }


# extended test
tt() {
  eval "case \"$1\" in
    $2) return 0;;
  esac"
  return 1
}


# verbose
tt "${1-}" "-L|--log|--boot" || {
  date > $log
  #if tty -s 0; then
    set -x >> $log 2>&1
  #else
    #exec >> $log 2>&1
    #set -x
  #fi
}


# prepare busybox and extra binaries
[ -x /dev/.busybox/ls ] || {
  mkdir -p /dev/.busybox
  chmod 0700 /dev/.busybox
  if [ -f /data/adb/bin/busybox ]; then
    [ -x /data/adb/bin/busybox ] || chmod -R 0700 /data/adb/bin
    /data/adb/bin/busybox --install -s /dev/.busybox
  elif [ -f /data/adb/magisk/busybox ]; then
    [ -x /data/adb/magisk/busybox ] || chmod 0700 /data/adb/magisk/busybox
    /data/adb/magisk/busybox --install -s /dev/.busybox
  elif which busybox > /dev/null; then
    eval "$(which busybox) --install -s /dev/.busybox"
  else
    echo "(!) Install busybox or simply place it in /data/adb/bin/"
    exit 3
  fi
}
export PATH=/data/adb/bin:/dev/.busybox:$PATH


param1=${1-}
t -n "$param1" && shift


# set up recovery environment
recovery_mode=false
pgrep -f zygote > /dev/null || {
  set +x
  clear
  recovery_mode=true
  trap 'exit_code=$?; set +x; echo; exit $exit_code' EXIT
  tt "$param1" "-*r*|-s|--ssaid|--boot|--restore" && {
    echo "This option is not meant for recovery environments"
    exit 1
  }
}


# temporarily disable SELinux
$recovery_mode || {
  sestatus=$(getenforce || exit)
  setenforce 0 || exit
  exxit() {
    local exit_code=$?
    t .$sestatus = .Enforcing && setenforce 1
    set +x
    $ssaid && {
      printf "Reboot $(t -f /data/adb/modules/migrator/service.sh || echo "& run \"${0##*/} -s\" ")"
      printf "to enable apps with Settings.Secure.ANDROID_ID (SSAID)\n"
    }
    rm /data/.__hltest 2>/dev/null
    echo
    exit $exit_code
  }
  trap exxit EXIT
}


all=false
tt "$param1" "-[br]|-[br]i|-[br]*A*" && all=true
tt "$*" "*--all*" && all=true


case "$param1" in

  -b*|--ba*) # backup

    echo "Backing up"

    extras="$(echo "$*" | grep -o '\+.*' | sed 's/\+ //')"
    set -- $(echo "$@" | sed 's/\+.*//')
    tt "$*" "*-v*" && v=v || v=
    regex="$(echo "$*" | sed -E 's/ |-v|--(app|data|magisk|settings|sysdata)//g')"

    pkg_list="$(grep 'name=.*codePath="/data/app/' /data/system/packages.xml \
      | grep -E$v "${regex:-..}" | grep -v com.offsec.nhterm \
      | awk '{print $2}' | tr -d \" | sed 's/^name=//')"

    unset regex
    mkdir -p $bkp_dir

    # remove backups of uninstalled apps
    (set +x
    ls -1 $bkp_dir 2>/dev/null \
      | grep -Ev '^_magisk$|^migrator.sh$|^_settings$|^_sysdata$' | \
      while IFS= read -r pkg; do
        grep -q "^$pkg " /data/system/packages.list || rm -rf $bkp_dir/$pkg
      done)

    t -f /data/system/users/0/runtime-permissions.xml \
      && bkp_runtime_perms=true \
      || bkp_runtime_perms=false

    echo "$pkg_list" > $tmp
    echo "$extras" >> $tmp

    while IFS= read -r pkg; do

      tt "$pkg" "*[a-z]*" || continue

      ${checked:-false} || {
        checked=true
        { $all || tt "$param1" "-b*[ad]*" || tt "$*" "*--app*|*--data*"; } || break
      }

      mkdir -p $bkp_dir/$pkg

      # backup app
      app=false
      if $all || tt "$param1" "-b*a*" || tt "$*" "*--app*"; then
        rm $bkp_dir/$pkg/*.apk
        ln /data/app/${pkg}-*/*.apk $bkp_dir/$pkg/ && {
          app=true
          printf "  $pkg\n    App\n"
        }
      fi 2>/dev/null

      # backup data
      if $all || tt "$param1" "-b*d*" || tt "$*" "*--data*"; then
        $app && echo "    Data" || printf "  $pkg\n    Data\n"
        killall -STOP $pkg > /dev/null 2>&1
        rm -rf $bkp_dir/$pkg/$pkg $bkp_dir/$pkg/${pkg}_de 2>/dev/null
        mkdir $bkp_dir/$pkg/$pkg $bkp_dir/$pkg/${pkg}_de
        for e in /data/data/${pkg}::$pkg /data/user_de/0/${pkg}::${pkg}_de; do
          ls -1d ${e%::*}/* ${e%::*}/.* 2>/dev/null \
            | grep -Ev '/\.$|/\.\.$|/app_tmp|/cache$|/code_cache$|/dex$|/lib$|oat$' | \
            while IFS= read -r i; do
              t -z "$i" && continue
              cp -dlR "$i" $bkp_dir/$pkg/${e#*::}/
              find "$i" -print0 2>/dev/null | xargs -0 -n 10 stat -c "%a %n" \
                >> $bkp_dir/$pkg/modes.txt
            done
        done

        # backup SSAID
        grep -q $pkg $ssaid_xml 2>/dev/null \
          && grep $pkg $ssaid_xml > $bkp_dir/$pkg/ssaid.txt

        # ensure restored $pkg can use Google Clould Messaging
        rm -f $bkp_dir/$pkg/${pkg}*/shared_prefs/com.google.android.gms.appid.xml 2>/dev/null
      fi

      # backup runtime permissions
      $bkp_runtime_perms && {
        sed -n "/$pkg/,/\<\//p" /data/system/users/0/runtime-permissions.xml \
          | grep 'granted=\"true\"' \
          | grep -o 'android.permission.*[A-Z]' > $bkp_dir/$pkg/runtime-perms.txt
      }
      killall -CONT $pkg > /dev/null 2>&1

    done < $tmp

    # backup migrator itself
    cp $(readlink -f "$0") $bkp_dir/migrator.sh

    # backup Android settings
    if tt "$param1" "-b*s*" || tt "$*" "*--settings*"; then
      echo "  Generic Android settings"
      rm -rf $bkp_dir/_settings 2>/dev/null
      mkdir $bkp_dir/_settings
      for i in global secure system; do
        awk '{print $3,$4}' /data/system/users/0/settings_$i.xml | tr -d \" \
          | sed -e s/name=// -e 's/ value//' -e '/^$/d' -e '/ standalone=/d' -e '/^ /d' > $bkp_dir/_settings/$i.txt
      done
    fi

    # backup system data
    if tt "$param1" "-b*D*" || tt "$*" "*--sysdata*"; then
      echo "  System data"
      rm -rf $bkp_dir/_sysdata 2>/dev/null
      mkdir $bkp_dir/_sysdata
      echo "$sysdata" > $tmp
      while IFS= read -r l; do
        for i in $l; do
          ln $i $bkp_dir/_sysdata/ 2>/dev/null || continue
          stat -c "rm %n 2>/dev/null; ln $bkp_dir/_sysdata/${i##*/} %n; chown %U:%G %n; chmod %a %n; /system/bin/restorecon %n" $i >> $bkp_dir/_sysdata/restore.sh
        done
      done < $tmp
    fi

    # backup magisk data
    if tt "$param1" "-b*m*" || tt "$*" "*--magisk*"; then
      echo "  Magisk data"
      rm -rf $bkp_dir/_magisk; 2>/dev/null
      mkdir $bkp_dir/_magisk
      ls -1d /data/adb/* /data/adb/.* 2>/dev/null | grep -Ev '/\.$|/\.\.$|/magisk$' | \
        while IFS= read -r i; do
          cp -dlR "$i" $bkp_dir/_magisk/
          find "$i" -print0 2>/dev/null | xargs -0 -n 10 stat -c "chown %U:%G %n; chmod %a %n" \
            >> $bkp_dir/_magisk/restore-attributes.sh
          find "$i" -print0 2>/dev/null | xargs -0 -n 10 ls -1dZ 2>/dev/null | sed 's/^/chcon /' \
            >> $bkp_dir/_magisk/restore-attributes.sh
        done
    fi
  ;;


  *-d*) # delete
    tt "$*" "*/*" || {
      l="$({ cd $bkp_dir && ls -1dp $*; cd $imports_dir && ls -1dp $*; } | sed 's/^/  /' | sort -u | grep -v '\./')"
      t -n "$l" && printf "Removing\n$l\n" || echo "No matches"
      cd $bkp_dir && eval rm -rf "$@"
      cd $imports_dir && eval rm -rf "$@"
    } 2>/dev/null
  ;;


  *-e*) # export
    cd $bkp_dir || exit
    case $param1 in
      -*e*i) # interactive mode
        clear
        echo
        ls -1 | grep -v '^migrator.sh$'
        echo
        echo '[regex|-v regex] [-d <destination directory>] [-c <"compression method">]'
        echo
        printf ": "
        read params
        eval parse_params -1v $params
      ;;
      *)
        parse_params -1v "$@"
      ;;
    esac
    mkdir -p $dir
    ls -1 | grep -v '^migrator.sh$' | grep -E $regex | \
      while IFS= read -r bkp; do
        tar -cv $bkp | $compressor > $dir/${bkp}$extension
      done
    cp $(readlink -f "$0") $dir/migrator.sh
  ;;


  *-i*) # import
    mkdir -p $imports_dir
    parse_params -cdv "$@"
    cd $dir || exit
    tt "$param1" "-*i*i*" && { # interactive mode
      clear
      echo
      ls -1 | grep -v '^migrator.sh$'
      echo
      echo '[regex|-v regex] [-c <"decompression method">]'
      echo
      printf ": "
      read params
      eval parse_params -cdv $params
    }
    ls -1 | grep -v '^migrator.sh$' | grep -E $regex | \
      while IFS= read -r bkp; do
        rm -f $imports_dir/${bkp%.tar*} 2>/dev/null
        $compressor $bkp | tar -xvf - -C $imports_dir
      done
    cp -f migrator.sh $imports_dir/
  ;;


  *-l*) # list
    regex="$*"
    list_bkps() {
      echo $1/
      ls -1 $1 2>/dev/null | sed -En -e '/^migrator.sh/d' -e "/${regex:-..}/p" | \
        while IFS= read -r i; do
          t -n "$i" || continue
          echo "  $i"
          if t -f $1/$i/base.apk; then
            if ls -d $1/$i/$i/* > /dev/null 2>&1; then
              echo "    App and data"
            else
              echo "    App only"
            fi
          else
            echo "    Data only"
          fi
        done
    }
    list_bkps $bkp_dir
    echo
    list_bkps $imports_dir
  ;;


  -L|--log)
    rm ${log}.bz2 2>/dev/null
    bzip2 -9 $log && {
      cp -f ${log}.bz2 /sdcard/
      rm ${log}.bz2
      echo "/sdcard/${log##*/}.bz2"
    }
  ;;


  *-r*) # restore

    echo "Restoring"

    tt "$*" "*-v*" && v=v || v=

    regex="$(echo "$*" | sed -E 's/ |-v|--(app|data|imported|magisk|settings|sysdata)//g')"

    if tt "$param1" "-r*i*" || tt "$*" "*--imported*"; then
      bkp_dir=$imports_dir
    fi

    ls -d $bkp_dir/* > /dev/null && cd $bkp_dir || exit

    # set the stage for ssaid restore
    t -f $ssaid_xml && ls */ssaid.txt > /dev/null 2>&1 && {
      id=$(grep -Eo 'id=.*name=' $ssaid_xml | grep -Eo '[0-9]+' | sort -n | tail -n 1)
      grep -v '</settings>' $ssaid_xml > $ssaid_xml_tmp
    }

    # enable "unknown sources" and disable package verification
    settings put secure install_non_market_apps 1
    settings put global verifier_verify_adb_installs 0
    settings put global package_verifier_enable 0

    ls -1 $bkp_dir 2>/dev/null \
      | grep -Ev '^_magisk$|^migrator.sh$|^_settings$|^_sysdata$' \
      | grep -E$v "${regex:-..}" > $tmp

    params="$@"
    touch /data/.__hltest

    while IFS= read -r pkg; do

      tt "$pkg" "*[a-z]*" || continue

      # restore app
      app=false
      if t -f $pkg/base.apk && { $all || tt "$param1" "-r*a*" || tt "$params" "*--app*"; }; then
        app=true
        printf "  $pkg\n    App\n"
        # base APK
        pm install -r  -i com.android.vending $pkg/base.apk > /dev/null && {
          rm $pkg/base.apk
          ln /data/app/${pkg}-*/base.apk $pkg/
          # split APKs
          ls $pkg/split_*.apk > /dev/null 2>&1 && {
            for pkg_ in $pkg/split_*.apk; do
              pm install -r -i com.android.vending -p $pkg $pkg_ > /dev/null && {
                rm $pkg_
                ln /data/app/${pkg}-*/${pkg_##*/} $pkg/
              }
            done
          }
        }
      fi

      { t -d /data/data/$pkg && ls -d $pkg/$pkg/* > /dev/null 2>&1; } || continue

      if $all || tt "$param1" "-r*d*" || tt "$params" "*--data*"; then
        $app && echo "    Data" || printf "  $pkg\n    Data\n"
        killall $pkg > /dev/null 2>&1
        # restore Settings.Secure.ANDROID_ID (SSAID)
        t -f $ssaid_xml && t -f $pkg/ssaid.txt && {
          ssaid=true
          killall $pkg > /dev/null 2>&1
          pm suspend $pkg > /dev/null 2>&1 || pm disable $pkg > /dev/null
          grep -q " $pkg " $ssaid_boot_script 2>/dev/null || echo "pm unsuspend $pkg 2>/dev/null || pm enable $pkg" >> $ssaid_boot_script
          set -- $(cat $pkg/ssaid.txt)
          id=$(( id + 1 ))
          f2="id=\"$id\""
          f3="name=\"$(stat -c %u /data/data/$pkg)\""
          sed -i /$pkg/d $ssaid_xml_tmp
          echo "${@}" | sed 's/^/  /' | sed -e "s/$2/$f2/" -e "s/$3/$f3/" >> $ssaid_xml_tmp
        }

        # restore data
        ls -d $pkg/${pkg}_de/* > /dev/null 2>&1 \
          && de=/data/user_de/0/${pkg}::${pkg}_de || de=
        for i in /data/data/${pkg}::$pkg $de; do
          lib_dir=$(readlink ${i%::*}/lib)
          set -- $(stat -c "%u:%g %a" ${i%::*})
          rm -rf ${i%::*} 2>/dev/null
          if ln /data/.__hltest ${i%::*} 2>/dev/null; then
            rm ${i%::*}
            cp -dlR $pkg/${i#*::} ${i%::*}
          else
            cp -dR $pkg/${i#*::} ${i%::*} && {
              rm -rf $pkg/${i#*::}
              cp -dlR ${i%::*} $pkg/${i#*::}
            }
          fi
          t -n "$lib_dir" && ln -sf $lib_dir ${i%::*}/lib
          # restore attributes
          chown -R $1 ${i%::*}
          chmod $2 ${i%::*}
        done
        while IFS= read -r line; do
          chmod $line 2>/dev/null
        done < $pkg/modes.txt
        /system/bin/restorecon -R /data/user*/0/$pkg > /dev/null 2>&1
      fi

      # restore runtime permissions
      for perm in $(cat $pkg/runtime-perms.txt); do
        pm grant $pkg $perm
      done
    done < $tmp

    # commit changes to $ssaid_xml
    $ssaid && {
      echo "</settings>" >> $ssaid_xml_tmp
      cat $ssaid_xml_tmp > $ssaid_xml
    }

    # restore Android settings
    if tt "$param1" "-r*s*" || tt "$params" "*--settings*"; then
      echo "  Generic Android Settings"
      settings_global="$(settings list global)"
      settings_secure="$(settings list secure)"
      settings_system="$(settings list system)"

      for namespace in global secure system; do
        while IFS= read -r setting; do
          tt "$setting" "*[a-z]*" || continue
          tt "$(eval echo \"\$settings_$namespace\")" "*${setting%%=*}=*" \
            && settings put $namespace ${setting%%=*} "${setting#*=}"
        done < $bkp_dir/_settings/$namespace.txt
      done
    fi

    # restore system data
    if tt "$param1" "-r*D*" || tt "$params" "*--sysdata*"; then
      echo "  System Data"
      mkdir /data/system/xlua 2>/dev/null && {
        chown 1000:1000 /data/system/xlua
        chmod 0770 /data/system/xlua
      }
      t -f $bkp_dir/_sysdata/restore.sh && {
        while IFS= read -r line; do
          $line > /dev/null 2>&1
        done < $bkp_dir/_sysdata/restore.sh
      }
    fi

    # restore magisk data
    if tt "$param1" "-r*m*" || tt "$params" "*--magisk*"; then
      echo "  Magisk Data"
      ls -1d $bkp_dir/_magisk/* $bkp_dir/_magisk/.* | grep -Ev '/\.$|/\.\.$|/restore-attributes.sh$' | \
        while IFS= read -r i; do
          rm -rf "/data/adb/${i##*/}"
          cp -dlR "$i" /data/adb/
        done 2>/dev/null
      while IFS= read -r line; do
        $line 2>/dev/null
      done < $bkp_dir/_magisk/restore-attributes.sh
    fi 2>/dev/null
  ;;


  # enable apps with Settings.Secure.ANDROID_ID (SSAID) and start automatic backups (if enabled)
  --boot|-*s*)

    ssaid_only=true
    t $param1 = --boot && ssaid_only=false

    until t .$(getprop sys.boot_completed 2>/dev/null) = .1 \
      && pm list packages -s > /dev/null 2>&1
    do
      sleep 15
    done

    t -f $ssaid_boot_script && {
      while IFS= read -r line; do
        $line 2>/dev/null
      done < $ssaid_boot_script
      rm $ssaid_boot_script
    }

    $ssaid_only && exit 0

    bkp=ADms
    config=/data/migrator.conf

    t -f $config && {
      . $config
      sleep $(( ${delay:-60} * 60 ))
      while true; do
        $0 -b$bkp || break
        ${cmd-}
        sleep $(( ${freq:-24} * 60 * 60 ))
        . $config
      done
    }
  ;;


  *) # help text
    TMPDIR=/dev
    cd $TMPDIR
    cat <<EOF | more
Migrator v2020.7.11-beta (202007110)
A Backup Solution and ROM Migration Utility for Android
Copyright 2018-2020, VR25 (patreon.com/vr25)
License: GPLv3+


ZERO warranties, use at your own risk!
This is still in beta. Backup your data before using.


USAGE

${0##*/} <option...> [arg...]


OPTIONS

-b[aAdDms]|--backup [--app] [--all] [--data] [--magisk] [--settings] [--sysdata] [regex|-v regex] [+ extra pkgs (full names)]

-d|--delete <"bkp name (wildcards supported)" ...>

-e[i]|--export[i] [regex|-v regex] [-d|--dir <destination directory>] [-c|--compressor <"compression method">]

-i[i]|--import[i] [regex|-v regex] [-d|--dir <source directory>] [-c|--compressor <"decompression method">]

-l|--list [regex|-v regex]

-L|--log

-r[aAdimsD]|--restore [--app] [--all] [--data] [--imported] [--magisk] [--settings] [--sysdata] [regex|-v regex]

-s|--ssaid


EXAMPLES

${0##*/} -b "ook.lite|instagram" (backup Facebook Lite and Instagram's APKs+data)

${0##*/} -b + com.android.vending com.android.inputmethod.latin (backup APKs and data of all user, plus two system apps, excluding APKs outside /data/app/)

${0##*/} -bms (backup Magisk data (m) and generic Android settings (s))

${0##*/} -bAmsD + \$(pm list packages -s | sed 's/^package://') (backup everything)

${0##*/} -bAmsD (backup everything, except system apps)

${0##*/} -bd (backup only users apps' data (d))

${0##*/} --delete \\* (all backups)

${0##*/} -d "*facebook.lite*" "*instag*"

${0##*/} --export (all to /sdcard/migrator/)

${0##*/} -e -d /storage/XXXX-XXXX/migrator (export all to /storage/XXXX-XXXX/migrator/)

${0##*/} -ei (interactive --export)

${0##*/} --import (from /sdcard/migrator/)

${0##*/} -i -d /storage/XXXX-XXXX/migrator

${0##*/} -ii -d /sdcard/m (interactive --import)

${0##*/} --list

${0##*/} -l facebook.lite

${0##*/} --restore --data facebook.lite

${0##*/} -r --imported --app --data facebook.lite

${0##*/} -rs (restore generic Android settings)

${0##*/} -rD (restore system data)

${0##*/} -rm (restore magisk data)

${0##*/} -rAms (restore everything, except system data (D, usually incompatible))

${0##*/} -s (enable apps with Settings.Secure.ANDROID_ID (SSAID) after rebooting)

${0##*/} -L (export $log to /sdcard/migrator.log.bz2)


Migrator can backup/restore apps (a), respective data (d) and runtime permissions.

The order of secondary options is irrelevent (e.g., -rda = -rad, "a" and "d" are secondary options).

Everything in /data/adb/, except magisk/ is considered "Magisk data" (m).
After restoring such data, one has to launch Magisk Manager and disable/remove all modules that are or may be incompatible with the [new] ROM.

Accounts, call logs, contacts and SMS/MMS, other telephony and system data (D) restore is not fully guaranteed.
These are complex files and often found in variable locations.
Thus, restoring such data is not generally recommended to regular users.
You may want to export contacts to a vCard file or use a third-party app to backup/restore all telephony data.

Backups of uninstalled apps are automatically removed when a backup command is issued.

For greater compatibility and safety, system apps are not backed up, unless specified as "extras" (see examples).
No APK outside /data/app/ is ever backed up.
Data of specified system apps is always backed up.

Migrator itself is included in backups and exported alongside backup archives.

Backups are stored in $bkp_dir/.

These backups take virtually no extra storage space (hard links).

Backups can be exported as compressed archives.
The default export/import directory is /sdcard/migrator.
"lzop -1v" is the default compression method.
Method here refers to "<program> <options>".
Imported backups are stored in "/data/media/migrator/imported/".

The Magisk module variant installs NetHunter Terminal.
Highly recommended, it's always excluded from backups.
If you use another terminal, it MUST BE EXCLUDED manually (e.g., "migrator -bA -v termux").
This is because apps being backed up are temporarily suspended.
Before restore, they are terminated.
Thus, not excluding the terminal that runs migrator will lead to incomplete backup/restore.

Having a terminal ready out of the box also adds convenience.
Users don't have to install a terminal to get started, especially after migrating to another ROM.

But why "NetHunter Terminal"?
It's free and open source, VERY light and regularly updated.
The homepage is https://store.nethunter.com/en/packages/com.offsec.nhterm .
You can always compare the package signatures and/or checksums.


AUTOMATING BACKUPS

"init.d" Script
#!/system/bin/sh
# This is a script that daemonizes "migrator --boot" to automate backups.
/path/to/busybox start-stop-daemon -bx /path/to/migrator -S -- --boot
exit 0

Config for Magisk and init.d
Create "/data/migrator.conf" with "bkp="[sub options] [args]"", "cmd="post bkp cmd"", "freq=[hours]" and "delay=[minutes].
e.g., "bkp=ADms; freq=24; delay=60" (defaults, used when \$config exists but is empty or values are null)
The first backup starts \$delay minutes after boot.
The config can be updated without rebooting.
Changes take efect in the next loop iteration.
Logs are saved to "$log".
Note: the config file is saved in /data and is not created automatically for obvious reasons. A factory reset wipes /data. After migrating to another ROM or performing a factory reset, you do not want your backups overwritten before the data is restored.

Tasker or Similar
"start-stop-daemon -bx ${0##*/} -S -- -bADms"
If you don't have busybox installed system-wide, prepend it to the command line above.
e.g., "/data/adb/magisk/busybox start-stop-daemon -bx ${0##*/} -S -- -bADms"
Logs are saved to "$log".


ROM MIGRATION STEPS AND NOTES

1. Backup everything, except system apps: "${0##*/} -bADms".

2. Install the [new] ROM (factory reset implied), addons as desired - and root it.

3. Once booted, flash Migrator from Magisk Manager (no reboot needed afterwards).

4. Launch NetHunter Terminal (bundled), select "AndroidSu" shell and run "${0##*/} -rAms" or "/dev/${0##*/} -rAms".

5. Launch Magisk Manager and disable/remove all restored modules that are or may be incompatible with the [new] ROM.

6. Reboot.

Restoring system data (D, listed below) is not recommended to users who don't know how to find their way around potential issues.

If you use a different root method, just ignore Magisk-related steps.

Remember that using a terminal other than NetHunter means you have to exclude it from backups/restores or detach migrator from it.


SYSTEM DATA (D)

/data/system_?e/0/accounts_?e.db*
/data/misc/adb/adb_keys
/data/misc/bluedroid/bt_config.conf
/data/misc/wifi/WifiConfigStore.xml
/data/misc/wifi softap.conf
/data/system/xlua/xlua.db*
/data/system/users/0/photo.png
/data/system/users/0/wallpaper*
/data/user*/0/com.android.*provider*/databases/*.db*
/data/system/deviceidle.xml


ASSORTED NOTES & TIPS

Busybox and extra binaries can be placed in /data/adb/bin/.
That's the first field in migrator's \$PATH.

"regex" and "-v regex" are grep syntax. "-E" is always implied.

Most operations work in recovery environments as well.
One can either flash the Magisk module [again] to have migrator and M commands available, or run "/data/M".
EOF
  ;;
esac
exit 0
