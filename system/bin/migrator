#!/system/bin/sh
# Migrator
# Android Backup Solution and ROM Migration Utility
# Â© 2018-2020, VR25 (patreon.com/vr25)
# License: GPLv3+


echo
option=$1
[ -n "$1" ] && shift

set -u
unset IFS
umask 0077

ssaid=false
bkpDir=/data/media/migrator/bkp
ssaid_xml_tmp=/dev/.settings_ssaid.xml.tmp
ssaid_xml=/data/system/users/0/settings_ssaid.xml
ssaid_boot_script=${bkpDir%/*}/enable-ssaid-apps.sh


# temporarily disable SELinux
sestatus=$(getenforce)
setenforce 0 || exit $?

trap '[ $sestatus != Permissive ] && setenforce 1; set +x; $ssaid && \
  echo "(i) Reboot & run \"${0##*/} -s\" to enable apps with Settings.Secure.ANDROID_ID (SSAID)"; echo' EXIT


# prepare busybox and extra binaries
[ -x /dev/.busybox/ls ] || {
  mkdir -p /dev/.busybox
  chmod 0700 /dev/.busybox
  if [ -f /data/adb/bin/busybox ]; then
    [ -x /data/adb/bin/busybox ] || chmod -R 0700 /data/adb/bin
    /data/adb/bin/busybox --install -s /dev/.busybox
  elif [ -f /data/adb/magisk/busybox ]; then
    [ -x /data/adb/magisk/busybox ] || chmod 0700 /data/adb/magisk/busybox
    /data/adb/magisk/busybox --install -s /dev/.busybox
  elif which busybox > /dev/null; then
    eval "$(which busybox) --install -s /dev/.busybox"
  else
    echo "(!) Install busybox or simply place it in /data/adb/bin/"
    exit 3
  fi
}
export PATH=/data/adb/bin:/dev/.busybox:$PATH


# check syntax, again
/system/bin/sh -n $(readlink -f $0) || exit $?


sysdata="/data/system_?e/0/accounts_?e.db*
/data/misc/adb/adb_keys
/data/misc/bluedroid/bt_config.conf
/data/misc/wifi/WifiConfigStore.xml
/data/misc/wifi/softap.conf
/data/system/xlua/xlua.db*
/data/system/users/0/photo.png
/data/system/users/0/wallpaper*
/data/user*/0/com.android.*provider*/databases/*.db*
/data/system/deviceidle.xml"


case "$option" in

  *-b*) # backup

    params="$@"
    extras="${params#* + }"
    params="${params% + *}"
    extras="${extras#$params}"
    set -- $params

    pkgList_="$(pm list packages -3 || exit 1)"
    pkgList_="${pkgList_//package:}"

    # preserve most recent backup
    rm -rf ${bkpDir}.old 2>/dev/null
    mv $bkpDir ${bkpDir}.old 2>/dev/null
    mkdir -p $bkpDir

    # backup magisk data
    case $option${1-} in
      -bm*|*--magisk)
        set -x
        mkdir $bkpDir/_magisk
        test ${1:-.} == --magisk && shift
        IFS=$'\n'
        for i in $(ls -1d /data/adb/* /data/adb/.* 2>/dev/null | grep -v /data/adb/magisk); do
          cp -dlR "$i" $bkpDir/_magisk/
          find "$i" -print0 2>/dev/null | xargs -0 -n 10 stat -c "chown %U:%G %n; chmod %a %n" \
            >> $bkpDir/_magisk/restore-attributes.sh
        done
        unset IFS
        set +x
      ;;
    esac

    pkgList="$(echo "$pkgList_" | grep -v com.offsec.nhterm | grep -E "${@:-..}")"

    # remove backups of uninstalled apps
    for pkg in $(ls -1d $bkpDir/* ${bkpDir}.old/* 2>/dev/null \
      | grep -Ev '/_magisk$|/migrator.sh$|/_settings$|/_sysdata$')
    do
      case "$pkgList_" in
        *${pkg##*/}*) :;;
        *) rm -rf $pkg;;
      esac
    done
    unset pkgList_

    test -f /data/system/users/0/runtime-permissions.xml \
      && bkpRuntimePerms=true \
      || bkpRuntimePerms=false
    set -x

    for pkg in $pkgList $extras; do

      test -d /data/data/$pkg || continue

      # backup app
      mkdir $bkpDir/$pkg
      ln /data/app/${pkg}-*/*.apk $bkpDir/$pkg/ 2>/dev/null

      # backup data
      killall -STOP $pkg > /dev/null 2>&1
      mkdir $bkpDir/$pkg/$pkg
      IFS=$'\n'
      for i in $(ls -1d /data/data/$pkg/* /data/data/$pkg/.* 2>/dev/null \
        | grep -Ev '/app_tmp|/cache$|/code_cache$|/dex$|/lib$|oat$')
      do
        cp -dlR "$i" $bkpDir/$pkg/$pkg/
        find "$i" -print0 2>/dev/null | xargs -0 -n 10 stat -c "chmod %a %n" \
          >> $bkpDir/$pkg/restore-modes.sh
      done
      unset IFS

      # ensure restored $pkg can use Google Clould Messaging
      rm -f $bkpDir/$pkg/$pkg/shared_prefs/com.google.android.gms.appid.xml 2>/dev/null

      # backup runtime permissions
      $bkpRuntimePerms && {
        sed -n "/$pkg/,/\<\//p" /data/system/users/0/runtime-permissions.xml \
          | grep 'granted=\"true\"' \
          | grep -o 'android.permission.*[A-Z]' > $bkpDir/$pkg/runtime-perms.txt
      }
      killall -CONT $pkg > /dev/null 2>&1

    done

    # backup migrator itself
    cp $(readlink -f "$0") $bkpDir/migrator.sh

    # backup Android settings
    mkdir $bkpDir/_settings
    settings list global > $bkpDir/_settings/global.txt
    settings list secure > $bkpDir/_settings/secure.txt
    settings list system > $bkpDir/_settings/system.txt

    # backup system data
    mkdir $bkpDir/_sysdata
    ln $ssaid_xml $bkpDir/_sysdata/ 2>/dev/null
    for i in $sysdata; do
      ls $i > /dev/null 2>&1 || continue
      ln $i $bkpDir/_sysdata/
      stat -c "rm %n 2>/dev/null; ln $bkpDir/_sysdata/${i##*/} %n; chown %U:%G %n; chmod %a %n; /system/bin/restorecon %n" $i >> $bkpDir/_sysdata/restore.sh
    done
  ;;


  *-d*) # delete
    set -x
    [[ "$*" != */* ]] && {
      cd $bkpDir && eval rm -rf "$@"
      cd ${bkpDir}.old && eval rm -rf "$@"
    } 2>/dev/null
  ;;


  *-e*) # export
    cd $bkpDir || exit $?
    tar -cv . | lzop -1v > ${1:-/sdcard}/migrator-backups.tar.lzo
    cp $(readlink -f "$0") ${1:-/sdcard}/migrator.sh
  ;;


  *-i*) # import
    rm -rf ${bkpDir}.old 2>/dev/null
    mkdir ${bkpDir}.old
    cd ${bkpDir}.old
    lzop -cdv ${1:-/sdcard}/migrator-backups.tar.lzo | tar -xvf -
  ;;


  *-l*) # list
    echo $bkpDir
    ls -1p $bkpDir 2>/dev/null | sed -En -e '/^migrator.sh/d' -e "/${@:-..}/s/^/  /p"
    echo
    echo ${bkpDir}.old
    ls -1p ${bkpDir}.old 2>/dev/null | sed -En -e '/^migrator.sh/d' -e "/${@:-..}/s/^/  /p"
  ;;


  *-r*) # restore

    restoreMagiskData=false
    restoreSettings=false
    restoreSysData=false

    case "$option $*" in
      *--magisk*|-rm\ *|-r?m\ *|-r??m\ *|-r???m\ *) restoreMagiskData=true;;
    esac

    case "$option $*" in
      *--old*|-ro\ *|-r?o\ *|-r??o\ *|-r???o\ *) bkpDir=${bkpDir}.old;;
    esac

    case "$option $*" in
      *--settings*|-rs\ *|-r?s\ *|-r??s\ *|-r???s\ *) restoreSettings=true;;
    esac

    case "$option $*" in
      *--sysdata*|-rS\ *|-r?S\ *|-r??S\ *|-r???S\ *) restoreSysData=true;;
    esac

    set -x
    ls -d $bkpDir/* > /dev/null && cd $bkpDir || exit $?

    # restore Android settings
    $restoreSettings && {
      settings_global="$(settings list global)"
      settings_secure="$(settings list secure)"
      settings_system="$(settings list system)"

      for namespace in global secure system; do
        for setting in $(cat $bkpDir/_settings/$namespace.txt); do
          case "$(eval echo \"\$settings_$namespace\")" in
            *${setting%=*}=*)
              settings put $namespace ${setting%=*} "${setting#*=}"
            ;;
          esac
        done
      done
    }

    # enable "unknown sources" and disable package verification
    settings put secure install_non_market_apps 1
    settings put global verifier_verify_adb_installs 0
    settings put global package_verifier_enable 0

    # restore system data
    $restoreSysData && {
      mkdir /data/system/xlua 2>/dev/null && {
        chown 1000:1000 /data/system/xlua
        chmod 0770 /data/system/xlua
      }
      . $bkpDir/_sysdata/restore.sh
    }

    $restoreMagiskData && {
      IFS=$'\n'
      for i in $(ls -1d $bkpDir/_magisk/* $bkpDir/_magisk/.* | grep -v '/restore-attributes.sh$'); do
        rm -rf "/data/adb/${i##*/}"
        cp -dlR "$i" /data/adb/
      done 2>/dev/null
      unset IFS
      set +x
      . $bkpDir/_magisk/restore-attributes.sh
      set -x
      for i in $(ls -1d /data/adb/* /data/adb/.* | grep -v /data/adb/magisk); do
        chcon -R u:object_r:system_file:s0 $i
      done
    } 2>/dev/null

    # remove obsolete positional parameters
    for i in $(seq 4); do
      case "${1-}" in
        --magisk|--old|--settings|--sysdata) shift;;
        *) break;;
      esac
    done

    for pkg in $(ls -1 $bkpDir 2>/dev/null | grep -Ev '^_magisk$|^migrator.sh$|^_settings$|^_sysdata$' | grep -E "${@:-..}"); do

      killall $pkg > /dev/null 2>&1

      # restore app
      test -f $pkg/base.apk && {
        # base APK
        pm install -r $pkg/base.apk || continue
        rm $pkg/base.apk
        ln /data/app/${pkg}-*/base.apk $pkg/
        # split APKs
        ls $pkg/split_*.apk > /dev/null 2>&1 && {
          for pkg_ in $pkg/split_*.apk; do
            pm install -r -p $pkg $pkg_ && {
              rm $pkg_
              ln /data/app/${pkg}-*/${pkg_##*/} $pkg/
            }
          done
        }

        # restore Settings.Secure.ANDROID_ID (SSAID)
        ssaid_xml_bkp=$bkpDir/_sysdata/settings_ssaid.xml
        grep -q $pkg $ssaid_xml_bkp && {
          monkey -p $pkg -c android.intent.category.LAUNCHER 1 # starts $pkg to register its SSAID
          until grep -q $pkg $ssaid_xml; do
            sleep 1
          done
          killall $pkg > /dev/null 2>&1
          pm suspend $pkg 2>/dev/null || pm disable $pkg
          echo "pm unsuspend $pkg 2>/dev/null || pm enable $pkg" >> $ssaid_boot_script
          old_ssaid_line=($(grep $pkg $ssaid_xml_bkp))
          new_ssaid_line=($(grep $pkg $ssaid_xml))
          new_ssaid_line[3]="${old_ssaid_line[3]}"
          new_ssaid_line[5]="${old_ssaid_line[5]}"
          sed -e "s|${new_ssaid_line[3]}|${old_ssaid_line[3]}|" -e "s|${new_ssaid_line[5]}|${old_ssaid_line[5]}|" \
            $(test -f $ssaid_xml_tmp && echo $ssaid_xml_tmp || echo $ssaid_xml) > ${ssaid_xml_tmp}.tmp
          mv -f ${ssaid_xml_tmp}.tmp $ssaid_xml_tmp
          ssaid=true
        }
      }

      # restore data
      libDir=$(readlink /data/data/$pkg/lib)
      attributes=($(stat -c "%u:%g %a" /data/data/$pkg))
      rm -rf /data/data/${pkg:-_FAIL_} 2>/dev/null
      if touch /data/._$pkg && ln /data/._$pkg /data/data/$pkg 2>/dev/null; then
        rm /data/data/$pkg
        cp -dlR $pkg/$pkg /data/data/
      else
        cp -dR $pkg/$pkg /data/data/ && {
          rm -rf ${pkg:-_FAIL_}/$pkg
          cp -dlR /data/data/$pkg $pkg/
        }
      fi
      rm /data/._$pkg
      test -n "$libDir" && ln -sf $libDir /data/data/$pkg/lib

      # restore attributes
      chown -R ${attributes[0]} /data/data/$pkg
      chmod ${attributes[1]} /data/data/$pkg
      set +x
      . $pkg/restore-modes.sh 2>/dev/null
      set -x
      /system/bin/restorecon -R /data/data/$pkg

      # restore runtime permissions
      for perm in $(cat $pkg/runtime-perms.txt); do
        pm grant $pkg $perm
      done
    done

    test -f $ssaid_xml_tmp && {
      cat $ssaid_xml_tmp > $ssaid_xml
      rm $ssaid_xml_tmp
    }
  ;;


  *-s*) # enable apps with Settings.Secure.ANDROID_ID (SSAID)
    set -x
    test -f $ssaid_boot_script && {
      until test -d /sdcard/?ndroid \
        -a .$(getprop sys.boot_completed 2>/dev/null) == .1 \
        && pm list packages -s > /dev/null 2>&1
      do
        sleep 10
      done
      . $ssaid_boot_script
      rm $ssaid_boot_script
    }
  ;;


  *) # help text
    echo "Migrator v2020.6.26-beta (202006260)
Android Backup Solution and ROM Migration Utility
Copyright 2018-2020, VR25 (patreon.com/vr25)
License: GPLv3+


ZERO warranties, use at your own risk!


Usage
  ${0##*/} <option> [arg ..]

Options
  -b[m]|--backup [--magisk] [egrep options] [\"regex\"] [+ extra pkgs (full names)]
  -d|--delete <\"backup name (wildcards supported)\" ..>
  -e|--export [destination directory]
  -i|--import [source directory]
  -l|--list [egrep options] [\"regex\"]
  -r[mosS]|--restore [--magisk] [--old] [--settings] --sysdata [egrep options] [\"regex\"]
  -s|--ssaid

Note
  [egrep options] [\"regex\"] is for matching user pkgs only.

Examples
  ${0##*/} --backup \"facebook.lite|instagram\" (Facebook Lite and Instagram)
  ${0##*/} -b . + com.android.vending com.android.inputmethod.latin (backup all user apps (dot), plus two system apps, excluding APKs outside /data/app/)
  ${0##*/} -bm -v . (backup settings, plus system and magisk (m) data; -v means exclude; dot means all apps)
  ${0##*/} -bm (backup everything, except system apps)
  ${0##*/} --delete \\* (all backups)
  ${0##*/} -d \"*facebook.lite*\" \"*instag*\"
  ${0##*/} --export facebook.lite
  ${0##*/} -e /storage/XXXX-XXXX facebook.lite
  ${0##*/} --import facebook.lite
  ${0##*/} -i /storage/XXXX-XXXX facebook.lite
  ${0##*/} --list
  ${0##*/} -l facebook.lite
  ${0##*/} --restore facebook.lite
  ${0##*/} --r --old facebook.lite (restore older backup)
  ${0##*/} -rs -v . (restore ONLY settings)
  ${0##*/} -rS -v . (restore ONLY system data)
  ${0##*/} -rm -v . (restore ONLY magisk data)
  ${0##*/} -rmsS (restore everything)
  ${0##*/} -s (enable apps with Settings.Secure.ANDROID_ID (SSAID) after rebooting)


Migrator can backup/restore apps (including split APKs and SSAIDs), respective data and runtime permissions.

Everything in /data/adb/, except magisk/ is considered \"Magisk data\".
This data is not backed up nor restored by default (requires dedicated options; see examples).
After restore, you have to launch Magisk Manager and disable or remove all modules that are or may be incompatible with the [new] ROM.

Android settings and system data (accounts, ADB keys, Bluetooth, com.android.*provider*, user picture, wallpaper, WiFi, XPrivacyLua) are always included in backups, but never restored automatically with apps (requires dedicated options; see examples).

Accounts, call logs, contacts and SMS/MMS, other telephony and misc system .db data restore is not fully guaranteed.
These are complex databases and the files are often found in variable locations.
Thus, you may want to export your contacts to a vCard file or use a third-party app to backup/restore all telephony data.

Backups of uninstalled apps are automatically removed just before new backups start.

For greater compatibility and safety, system apps are not backed up, unless specified as \"extras\" (see examples).
No APK outside /data/app/ is ever backed up.
Data of specified system apps is always backed up.

Migrator itself is included in backups and exported alongside backup archives.

Two backups are kept: $bkpDir and ${bkpDir}.old.

These backups are local and take virtually no extra space (hard links).

Backups can be exported to external storage as .tar.lzo archives.

--export saves to /sdcard/migrator-backups.tar.lzo by default.
Only the most recent backups are exported.

--import saves to ${bkpDir}.old/.
It reads from /sdcard/migrator-backups.tar.lzo by default.

The Magisk module variant installs NetHunter Terminal.
Highly recommended, it's always excluded from backups.
If you use another terminal, it must be excluded manually (e.g., "migrator --backup -v termux").
This is because apps being backed up are temporarily suspended.
Before restore, these are terminated.
Thus, not excluding the terminal that runs migrator will lead to incomplete backup/restore.

Why NetHunter Terminal?
It's free and open source, very light and regularly updated.
The homepage is https://store.nethunter.com/en/packages/com.offsec.nhterm .
You can always compare the package signatures and/or checksums.

System data
  /data/system_?e/0/accounts_?e.db*
  /data/misc/adb/adb_keys
  /data/misc/bluedroid/bt_config.conf
  /data/misc/wifi/WifiConfigStore.xml
  /data/misc/wifi softap.conf
  /data/system/xlua/xlua.db*
  /data/system/users/0/photo.png
  /data/system/users/0/wallpaper*
  /data/user*/0/com.android.*provider*/databases/*.db*
  /data/system/deviceidle.xml

Should you face any Bluetooth/Wi-Fi issues after data restore, just remove the respective configuration files and reboot or simply reset network settings.


ROM Migration Steps

1. Backup everything: \"${0##*/} -bm . + com.android.vending EXTRAS\".
2. Recovery > install [new] ROM  (factory reset implied) + Magisk > reboot.
3. Flash migrator from Magisk Manager (no reboot needed afterwards).
4. Launch NetHunter Terminal (bundled), select \"AndroidSu\" shell and run \"M -rmsS\" or \"/dev/M -rmsS\" to restore everything.
5. Launch Magisk Manager and disable/remove all modules that are or may be incompatible with the [new] ROM.
6. Reboot.
7. Run ${0##*/} -s to enable apps with Settings.Secure.ANDROID_ID (SSAID).
8. If you face Bluetooth and/or WiFi issues, either reset network settings or remove the respective configuration files (see above).

EXTRAS are system packages (full names).


Tips

Busybox and extra binaries can be placed in /data/adb/bin/.

The default compression program (lzop) can be overridden by placing the desired replacement (or a symlink to it) in that location.
e.g., \"mkdir -p /data/adb/bin; ln -s /system/xbin/pigz /data/adb/bin/lzop\"
The file extension will remain .tar.lzo, though.

The Magisk module automates \"${0##*/} --ssaid\"." | more
  ;;
esac
exit 0
