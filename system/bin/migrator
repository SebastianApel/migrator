#!/system/bin/sh
# Migrator
# Android Backup Solution and ROM Migration Utility
# Â© 2018-2020, VR25 (patreon.com/vr25)
# License: GPLv3+


echo
param1=$1
[ -n "$1" ] && shift

set -u
unset IFS
umask 0077


ssaid=false
bkp_dir=/data/media/migrator/local
imports_dir=${bkp_dir%/*}/imported
ssaid_xml_tmp=/dev/.settings_ssaid.xml.tmp
ssaid_xml=/data/system/users/0/settings_ssaid.xml
ssaid_boot_script=${bkp_dir%/*}/enable-ssaid-apps.sh

sysdata="/data/system_?e/0/accounts_?e.db*
/data/misc/adb/adb_keys
/data/misc/bluedroid/bt_config.conf
/data/misc/wifi/WifiConfigStore.xml
/data/misc/wifi/softap.conf
/data/system/xlua/xlua.db*
/data/system/users/0/photo.png
/data/system/users/0/wallpaper*
/data/user*/0/com.android.*provider*/databases/*.db*
/data/system/deviceidle.xml"


# temporarily disable SELinux
sestatus=$(getenforce)
setenforce 0 || exit $?

trap '[ $sestatus != Permissive ] && setenforce 1; set +x; $ssaid && \
  echo "(i) Reboot & run \"${0##*/} -s\" to enable apps with Settings.Secure.ANDROID_ID (SSAID)"; echo' EXIT


# prepare busybox and extra binaries
[ -x /dev/.busybox/ls ] || {
  mkdir -p /dev/.busybox
  chmod 0700 /dev/.busybox
  if [ -f /data/adb/bin/busybox ]; then
    [ -x /data/adb/bin/busybox ] || chmod -R 0700 /data/adb/bin
    /data/adb/bin/busybox --install -s /dev/.busybox
  elif [ -f /data/adb/magisk/busybox ]; then
    [ -x /data/adb/magisk/busybox ] || chmod 0700 /data/adb/magisk/busybox
    /data/adb/magisk/busybox --install -s /dev/.busybox
  elif which busybox > /dev/null; then
    eval "$(which busybox) --install -s /dev/.busybox"
  else
    echo "(!) Install busybox or simply place it in /data/adb/bin/"
    exit 3
  fi
}
export PATH=/data/adb/bin:/dev/.busybox:$PATH


parse_params() {
  compressor="lzop $1"
  dir=/sdcard/migrator
  regex=..
  shift
  while test -n "${1-}"; do
    case "$1" in
      -d|--dir)
        dir="$2"
        shift 2
      ;;
      -c|--compressor)
        compressor="$2"
        shift 2
      ;;
      -v)
        regex="$1 \"$2\""
        shift 2
      ;;
      *)
        regex="$1"
        shift
      ;;
    esac
  done
  extension=.tar.${compressor% *}
}


all=false
[[ $param1 == -[br] || $param1 == -[br]i || $param1 == -[br]*A* || "$@" == *--all* ]] && all=true


case "$param1" in

  *-b*) # backup

    params="$@"
    [[ "$@" == *+* ]] && extras="${params##* +}" || extras=
    params="${params%% +*$extras}"
    extras="${extras##$params}"

    set -- $params
    regex="$params"

    for i in app data magisk settings sysdata; do
      regex="${regex/--$i}"
    done

    [[ "regex" == *-v* ]] && v=v || v=
    regex="${regex/-v}"
    regex="${regex// }"

    pkg_list_="$(pm list packages -3 || exit $?)"
    pkg_list_="${pkg_list_//package:}"
    pkg_list="$(echo "$pkg_list_" | grep -v com.offsec.nhterm | grep -E$v "${regex:-..}")"

    unset params regex
    mkdir -p $bkp_dir

    # remove backups of uninstalled apps
    for pkg in $(ls -1d $bkp_dir/* 2>/dev/null \
      | grep -Ev '/_magisk$|/migrator.sh$|/_settings$|/_sysdata$')
    do
      case "$pkg_list_" in
        *${pkg##*/}*) :;;
        *) rm -rf $pkg;;
      esac
    done
    unset pkg_list_

    test -f /data/system/users/0/runtime-permissions.xml \
      && bkp_runtime_perms=true \
      || bkp_runtime_perms=false
    set -x

    checked=false

    for pkg in $pkg_list $extras; do

      $checked || {
        [[ $all == true || $param1 == -b*[ad]* || "$@" == *--app* || "$@" == *--data* ]] || break
      }
      checked=true
      test -d /data/data/$pkg || continue
      mkdir -p $bkp_dir/$pkg

      # backup app
      [[ $all == true || $param1 == -b*a* || "$@" == *--app* ]] && {
        rm $bkp_dir/$pkg/*.apk
        ln /data/app/${pkg}-*/*.apk $bkp_dir/$pkg/
      } 2>/dev/null

      # backup data
      [[ $all == true || $param1 == -b*d* || "$@" == *--data* ]] && {
        killall -STOP $pkg > /dev/null 2>&1
        rm -rf $bkp_dir/$pkg/$pkg 2>/dev/null
        mkdir $bkp_dir/$pkg/$pkg
        IFS=$'\n'
        for i in $(ls -1d /data/data/$pkg/* /data/data/$pkg/.* 2>/dev/null \
          | grep -Ev '/app_tmp|/cache$|/code_cache$|/dex$|/lib$|oat$')
        do
          cp -dlR "$i" $bkp_dir/$pkg/$pkg/
          find "$i" -print0 2>/dev/null | xargs -0 -n 10 stat -c "%a %n" \
            >> $bkp_dir/$pkg/modes.txt
        done
        unset IFS

        # backup SSAID
        grep -q $pkg $ssaid_xml 2>/dev/null \
          && grep $pkg $ssaid_xml > $bkp_dir/$pkg/ssaid.txt

        # ensure restored $pkg can use Google Clould Messaging
        rm -f $bkp_dir/$pkg/$pkg/shared_prefs/com.google.android.gms.appid.xml 2>/dev/null
      }

      # backup runtime permissions
      $bkp_runtime_perms && {
        sed -n "/$pkg/,/\<\//p" /data/system/users/0/runtime-permissions.xml \
          | grep 'granted=\"true\"' \
          | grep -o 'android.permission.*[A-Z]' > $bkp_dir/$pkg/runtime-perms.txt
      }
      killall -CONT $pkg > /dev/null 2>&1

    done

    # backup migrator itself
    cp $(readlink -f "$0") $bkp_dir/migrator.sh

    # backup Android settings
    [[ $param1 == -b*s* || "$@" == *--settings* ]] && {
      rm -rf $bkp_dir/_settings 2>/dev/null
      mkdir $bkp_dir/_settings
      settings list global > $bkp_dir/_settings/global.txt
      settings list secure > $bkp_dir/_settings/secure.txt
      settings list system > $bkp_dir/_settings/system.txt
    }

    # backup system data
    [[ $param1 == -b*S* || "$@" == *--sysdata* ]] && {
      rm -rf $bkp_dir/_sysdata 2>/dev/null
      mkdir $bkp_dir/_sysdata
      for i in $sysdata; do
        ls $i > /dev/null 2>&1 || continue
        ln $i $bkp_dir/_sysdata/
        stat -c "rm %n 2>/dev/null; ln $bkp_dir/_sysdata/${i##*/} %n; chown %U:%G %n; chmod %a %n; /system/bin/restorecon %n" $i >> $bkp_dir/_sysdata/restore.sh
      done
    }

    # backup magisk data
    [[ $param1 == -b*m* || "$@" == *--magisk* ]] && {
      set -x
      rm -rf $bkp_dir/_magisk; 2>/dev/null
      mkdir $bkp_dir/_magisk
      IFS=$'\n'
      for i in $(ls -1d /data/adb/* /data/adb/.* 2>/dev/null | grep -v /data/adb/magisk); do
        cp -dlR "$i" $bkp_dir/_magisk/
        find "$i" -print0 2>/dev/null | xargs -0 -n 10 stat -c "chown %U:%G %n; chmod %a %n" \
          >> $bkp_dir/_magisk/restore-attributes.sh
        find "$i" -print0 2>/dev/null | xargs -0 -n 10 ls -1dZ 2>/dev/null | sed 's/^/chcon /' \
          >> $bkp_dir/_magisk/restore-attributes.sh
      done
      unset IFS
      set +x
    }
  ;;


  *-d*) # delete
    set -x
    [[ "$*" != */* ]] && {
      cd $bkp_dir && eval rm -rf "$@"
      cd $imports_dir && eval rm -rf "$@"
    } 2>/dev/null
  ;;


  *-e*) # export
    set -x
    cd $bkp_dir || exit $?
    case $param1 in
      -*e*i) # interactive mode
        set +x
        clear
        echo
        ls -1 | grep -v '^migrator.sh$'
        echo
        echo '[regex|-v regex] [-d <destination directory>] [-c <"compression method">]'
        echo
        echo -n ": "
        read params
        set -x
        eval parse_params -1v $params
      ;;
      *)
        parse_params -1v "$@"
      ;;
    esac
    mkdir -p $dir
    for bkp in $(ls -1 | grep -v '^migrator.sh$' | grep -E $regex); do
      tar -cv $bkp | $compressor > $dir/${bkp}$extension
    done
    cp $(readlink -f "$0") $dir/migrator.sh
  ;;


  *-i*) # import
    set -x
    mkdir -p $imports_dir
    parse_params -cdv "$@"
    cd $dir || exit $?
    case $param1 in
      -*i*i*) # interactive mode
        set +x
        clear
        echo
        ls -1 | grep -v '^migrator.sh$'
        echo
        echo '[regex|-v regex] [-c <"decompression method">]'
        echo
        echo -n ": "
        read params
        set -x
        eval parse_params -cdv $params
      ;;
    esac
    for bkp in $(ls -1 | grep -v '^migrator.sh$' | grep -E $regex); do
      rm -rf $imports_dir/${bkp%.tar*} 2>/dev/null
      $compressor $bkp | tar -xvf - -C $imports_dir
    done
    cp -f migrator.sh $imports_dir/
  ;;


  *-l*) # list
    echo $bkp_dir
    ls -1p $bkp_dir 2>/dev/null | sed -En -e '/^migrator.sh/d' -e "/${@:-..}/s/^/  /p"
    echo
    echo $imports_dir
    ls -1p $imports_dir 2>/dev/null | sed -En -e '/^migrator.sh/d' -e "/${@:-..}/s/^/  /p"
  ;;


  *-r*) # restore

    regex="$@"

    for i in app data imported magisk settings sysdata; do
      regex="${regex/--$i}"
    done

    [[ "$regex" == *-v* ]] && v=v || v=
    regex="${regex/-v}"
    regex="${regex// }"

    [[ $param1 == -r*i* || "$@" == *imported* ]] && bkp_dir=$imports_dir

    set -x
    ls -d $bkp_dir/* > /dev/null && cd $bkp_dir || exit $?

    # set the stage for ssaid restore
    test -f $ssaid_xml && ls */ssaid.txt > /dev/null 2>&1 && {
      id=$(grep -Eo 'id=.*name=' $ssaid_xml | grep -Eo '[0-9]+' | sort -n | tail -n 1)
      grep -v '</settings>' $ssaid_xml > $ssaid_xml_tmp
    }

    # enable "unknown sources" and disable package verification
    settings put secure install_non_market_apps 1
    settings put global verifier_verify_adb_installs 0
    settings put global package_verifier_enable 0

    for pkg in $(ls -1 $bkp_dir 2>/dev/null \
      | grep -Ev '^_magisk$|^migrator.sh$|^_settings$|^_sysdata$' \
      | grep -E$v "${regex:-..}")
    do

      # restore app
      test -f $pkg/base.apk && [[ $all == true || $param1 == -r*a* || "$@" == *--app* ]] && {
        # base APK
        pm install -r  -i com.android.vending $pkg/base.apk && {
          rm $pkg/base.apk
          ln /data/app/${pkg}-*/base.apk $pkg/
          # split APKs
          ls $pkg/split_*.apk > /dev/null 2>&1 && {
            for pkg_ in $pkg/split_*.apk; do
              pm install -r -i com.android.vending -p $pkg $pkg_ && {
                rm $pkg_
                ln /data/app/${pkg}-*/${pkg_##*/} $pkg/
              }
            done
          }
        }
      }

      test -d /data/data/${pkg:-_FAIL_} || continue

      [[ $all == true || $param1 == -r*d* || "$@" == *--data* ]] && {
        killall $pkg > /dev/null 2>&1
        # restore Settings.Secure.ANDROID_ID (SSAID)
        test -f $ssaid_xml -a -f $pkg/ssaid.txt && {
          ssaid=true
          killall $pkg > /dev/null 2>&1
          pm suspend $pkg 2>/dev/null || pm disable $pkg
          echo "pm unsuspend $pkg 2>/dev/null || pm enable $pkg" >> $ssaid_boot_script
          ssaid_line=($(cat $pkg/ssaid.txt))
          id=$(( id + 1 ))
          ssaid_line[1]="id=\"$id\""
          ssaid_line[2]="name=\"$(stat -c %u /data/data/$pkg)\""
          sed -i /$pkg/d $ssaid_xml_tmp
          echo "${ssaid_line[@]}" | sed 's/^/  /' >> $ssaid_xml_tmp
        }

        # restore data
        libDir=$(readlink /data/data/$pkg/lib)
        attributes=($(stat -c "%u:%g %a" /data/data/$pkg))
        rm -rf /data/data/${pkg:-_FAIL_} 2>/dev/null
        if touch /data/._$pkg && ln /data/._$pkg /data/data/$pkg 2>/dev/null; then
          rm /data/data/$pkg
          cp -dlR $pkg/$pkg /data/data/
        else
          cp -dR $pkg/$pkg /data/data/ && {
            rm -rf ${pkg:-_FAIL_}/$pkg
            cp -dlR /data/data/$pkg $pkg/
          }
        fi
        rm /data/._$pkg
        test -n "$libDir" && ln -sf $libDir /data/data/$pkg/lib

        # restore attributes
        chown -R ${attributes[0]} /data/data/$pkg
        chmod ${attributes[1]} /data/data/$pkg
        set +x
        while IFS= read -r line; do
          chmod $line 2>/dev/null
        done < $pkg/modes.txt
        set -x
        /system/bin/restorecon -R /data/data/$pkg
      }

      # restore runtime permissions
      for perm in $(cat $pkg/runtime-perms.txt); do
        pm grant $pkg $perm
      done
    done

    # commit changes to $ssaid_xml
    $ssaid && {
      echo "</settings>" >> $ssaid_xml_tmp
      cat $ssaid_xml_tmp > $ssaid_xml
    }

    # restore Android settings
    [[ $param1 == -r*s* || "$@" == *--settings* ]] && {
      settings_global="$(settings list global)"
      settings_secure="$(settings list secure)"
      settings_system="$(settings list system)"

      for namespace in global secure system; do
        for setting in $(cat $bkp_dir/_settings/$namespace.txt); do
          case "$(eval echo \"\$settings_$namespace\")" in
            *${setting%=*}=*)
              settings put $namespace ${setting%=*} "${setting#*=}"
            ;;
          esac
        done
      done
    }

    # restore system data
    [[ $param1 == -r*S* || "$@" == *--sysdata* ]] && {
      mkdir /data/system/xlua 2>/dev/null && {
        chown 1000:1000 /data/system/xlua
        chmod 0770 /data/system/xlua
      }
      test -f $bkp_dir/_sysdata/restore.sh && {
        while IFS= read -r line; do
          $line 2>/dev/null
        done < $bkp_dir/_sysdata/restore.sh
      }
    }

    # restore magisk data
    [[ $param1 == -r*m* || "$@" == *--magisk* ]] && {
      IFS=$'\n'
      for i in $(ls -1d $bkp_dir/_magisk/* $bkp_dir/_magisk/.* | grep -v '/restore-attributes.sh$'); do
        rm -rf "/data/adb/${i##*/}"
        cp -dlR "$i" /data/adb/
      done 2>/dev/null
      unset IFS
      set +x
      while IFS= read -r line; do
        $line 2>/dev/null
      done < $bkp_dir/_magisk/restore-attributes.sh
      set -x
    } 2>/dev/null
  ;;


  *-s*) # enable apps with Settings.Secure.ANDROID_ID (SSAID)
    set -x
    until test -d /sdcard/?ndroid \
      -a .$(getprop sys.boot_completed 2>/dev/null) == .1 \
      && pm list packages -s > /dev/null 2>&1
    do
      sleep 10
    done
    test -f $ssaid_boot_script && {
      while IFS= read -r line; do
        $line 2>/dev/null
      done < $ssaid_boot_script
      rm $ssaid_boot_script
    }
  ;;


  *) # help text
    TMPDIR=/dev
    cd $TMPDIR
    cat <<EOF | more
Migrator v2020.7.1-beta.4 (202007014)
Android Backup Solution and ROM Migration Utility
Copyright 2018-2020, VR25 (patreon.com/vr25)
License: GPLv3+


ZERO warranties, use at your own risk!
This is still in beta. Backup your data before using.


Usage

  ${0##*/} <option...> [arg...]


Options

  -b[aAdmsS]|--backup [--app] [--all] [--data] [--magisk] [--settings] [--sysdata] [regex|-v regex] [+ extra pkgs (full names)]

  -d|--delete <"bkp name (wildcards supported)" ...>

  -e[i]|--export[i] [regex|-v regex] [-d|--dir <destination directory>] [-c|--compressor <"compression method">]

  -i[i]|--import[i] [regex|-v regex] [-d|--dir <source directory>] [-c|--compressor <"decompression method">]

  -l|--list [regex|-v regex]

  -r[aAdimsS]|--restore [--app] [--all] [--data] [--imported] [--magisk] [--settings] [--sysdata] [regex|-v regex]

  -s|--ssaid


Examples

${0##*/} --b "ook.lite|instagram" (backup Facebook Lite and Instagram's APKs+data)

${0##*/} -b + com.android.vending com.android.inputmethod.latin (backup APKs and data of all user, plus two system apps, excluding APKs outside /data/app/)

${0##*/} -bms (backup Magisk data (m) and generic Android settings (s))

${0##*/} -bAmsS + \$(pm list packages -s | sed 's/^package://') (backup everything)

${0##*/} -bAmsS (backup everything, except system apps)

${0##*/} -bd (backup only users apps' data (d))

${0##*/} --delete \\* (all backups)

${0##*/} -d "*facebook.lite*" "*instag*"

${0##*/} --export (all to /sdcard/migrator/)

${0##*/} -e -d /storage/XXXX-XXXX/migrator (export all to /storage/XXXX-XXXX/migrator/)

${0##*/} -ei (interactive --export)

${0##*/} --import (from /sdcard/migrator/)

${0##*/} -i -d /storage/XXXX-XXXX/migrator

${0##*/} -ii -d /sdcard/m (interactive --import)

${0##*/} --list

${0##*/} -l facebook.lite

${0##*/} --restore --data facebook.lite

${0##*/} -r --imported --app --data facebook.lite

${0##*/} -rs (restore generic Android settings)

${0##*/} -rS (restore system data)

${0##*/} -rm (restore magisk data)

${0##*/} -rAms (restore everything, except system data (S, usually incompatible))

${0##*/} -s (enable apps with Settings.Secure.ANDROID_ID (SSAID) after rebooting)


Migrator can backup/restore apps (a), respective data (d) and runtime permissions.

Everything in /data/adb/, except magisk/ is considered "Magisk data" (m).
After restoring such data, one has to launch Magisk Manager and disable/remove all modules that are or may be incompatible with the [new] ROM.

Accounts, call logs, contacts and SMS/MMS, other telephony and system data (S) restore is not fully guaranteed.
These are complex files and often found in variable locations.
Thus, restoring them (-rS) is not a general recommendation.
You may want to export contacts to a vCard file or use a third-party app to backup/restore all telephony data.

Backups of uninstalled apps are automatically removed when a backup command is issued.

For greater compatibility and safety, system apps are not backed up, unless specified as "extras" (see examples).
No APK outside /data/app/ is ever backed up.
Data of specified system apps is always backed up.

Migrator itself is included in backups and exported alongside backup archives.

Backups are stored in $bkp_dir/.

These backups take virtually no extra storage space (hard links).

Backups can be exported as compressed archives.
The default export/import directory is /sdcard/migrator.
"lzop -1v" is the default compression method.
Method here refers to "<program> <options>".
Imported backups are stored in "/data/media/migrator/imported/".

The Magisk module variant installs NetHunter Terminal.
Highly recommended, it's always excluded from backups.
If you use another terminal, it MUST BE EXCLUDED manually (e.g., "migrator -bad -v termux").
This is because apps being backed up are temporarily suspended.
Before restore, they are terminated.
Thus, not excluding the terminal that runs migrator will lead to incomplete backup/restore.

Having a terminal ready out of the box also adds convenience.
Users don't have to install a terminal to get started, especially after migrating to another ROM.

But why "NetHunter Terminal"?
It's free and open source, VERY light and regularly updated.
The homepage is https://store.nethunter.com/en/packages/com.offsec.nhterm .
You can always compare the package signatures and/or checksums.


ROM Migration Steps

1. Backup everything: "M -bAmsS + com.android.vending EXTRAS".
2. Recovery > install [new] ROM  (factory reset implied) + Magisk > reboot.
3. Flash migrator from Magisk Manager (no reboot needed afterwards).
4. Launch NetHunter Terminal (bundled), select "AndroidSu" shell and run "M -rAms" or "/dev/M -rAms" to restore everything, except system data (S, usually incompatible).
5. Launch Magisk Manager and disable/remove all modules that are or may be incompatible with the [new] ROM.
6. Reboot.
7. Run "M -s" to enable apps with Settings.Secure.ANDROID_ID (SSAID).

EXTRAS are system packages (full names).
One can use "+ \$(pm list packages -s | sed 's/^package://')" to include all system apps' data and updated APKs (those in /data/app/).


System Data (S)

/data/system_?e/0/accounts_?e.db*
/data/misc/adb/adb_keys
/data/misc/bluedroid/bt_config.conf
/data/misc/wifi/WifiConfigStore.xml
/data/misc/wifi softap.conf
/data/system/xlua/xlua.db*
/data/system/users/0/photo.png
/data/system/users/0/wallpaper*
/data/user*/0/com.android.*provider*/databases/*.db*
/data/system/deviceidle.xml


Notes & Tips

"regex" and "-v regex" are grep syntax. "-E" is always included.

Busybox and extra binaries can be placed in /data/adb/bin/.

The default compression program (lzop) can be overridden by placing the desired replacement (or a symlink to it) in /data/adb/bin/.
e.g., "mkdir -p /data/adb/bin; ln -s /system/xbin/pigz /data/adb/bin/lzop"
The file extension will remain .tar.lzop, though.

The Magisk module automates "${0##*/} --ssaid".
EOF
  ;;
esac
exit 0
